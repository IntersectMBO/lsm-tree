- ignore: {name: "Avoid lambda"} # 2 hints
- ignore: {name: "Avoid lambda using `infix`"} # 1 hint
- ignore: {name: "Eta reduce"} # 1 hint
- ignore: {name: "Functor law"} # 5 hints
- ignore: {name: "Redundant $"} # 7 hints
- ignore: {name: "Redundant bracket"} # 2 hints
- ignore: {name: "Redundant guard"} # 1 hint
- ignore: {name: "Redundant lambda"} # 4 hints
- ignore: {name: "Unused LANGUAGE pragma"} # 14 hints
- ignore: {name: "Use <$>"} # 1 hint
- ignore: {name: "Use camelCase"} # 8 hints
- ignore: {name: "Use isAsciiLower"} # 1 hint
- ignore: {name: "Use isDigit"} # 2 hints
- ignore: {name: "Use newtype instead of data"} # 3 hints
- ignore: {name: "Use uncurry"} # 1 hint
- ignore: {name: "Use underscore"} # 2 hints
- ignore: {name: "Use &&"} # 1 hint
- ignore: {name: "Use list literal"} # 1 hint
- ignore: {name: "Use tuple-section"}
- ignore: {name: "Use const"}
- ignore: {name: "Use :"}
- ignore: {name: "Redundant <$>"}
- ignore: {name: "Use zipWithM"}
- ignore: {name: "Redundant return"}
- ignore: {name: "Use section"}
- ignore: {name: "Redundant $!"}
- ignore: {name: "Use shows"}
- ignore: {name: "Use fmap"}
- ignore: {name: "Use <=<"}
- ignore: {name: "Use void"}
- ignore: {name: "Use zipWith"}
- ignore: {name: "Evaluate"}
- ignore: {name: "Redundant if"}
- ignore: {name: "Use catMaybes"}
- ignore: {name: "Replace case with maybe"}
- ignore: {name: "Redundant =="}
- ignore: {name: "Hoist not"}
- ignore: {name: "Use /="}

# Specify additional command line arguments
#
# - arguments: [--color, --cpp-simple, -XQuasiQuotes]

# Control which extensions/flags/modules/functions can be used
#
# - extensions:
#   - default: false # all extension are banned by default
#   - name: [PatternGuards, ViewPatterns] # only these listed extensions can be used
#   - {name: CPP, within: CrossPlatform} # CPP can only be used in a given module
#
# - flags:
#   - {name: -w, within: []} # -w is allowed nowhere
#
- modules:
  # vector
  - { name: "Data.Vector", as: "V" }
  - { name: "Data.Vector.Generic", as: "VG" }
  - { name: "Data.Vector.Generic.Mutable", as: "VGM" }
  - { name: "Data.Vector.Mutable", as: "VM" }
  - { name: "Data.Vector.Unboxed", as: "VU" }
  - { name: "Data.Vector.Unboxed.Mutable", as: "VUM" }
  - { name: "Data.Vector.Primitive", as: "VP" }
  - { name: "Data.Vector.Primitive.Mutable", as: "VPM" }
  # others
  - { name: "Database.LSMTree.Internal.RawBytes", as: "RB"} # if you import Database.LSMTree.Internal.RawByes qualified, it must be as 'RB'
#   - {name: Control.Arrow, within: []} # Certain modules are banned entirely
#
# - functions:
#   - {name: unsafePerformIO, within: []} # unsafePerformIO can only appear in no modules

# Add custom hints for this project
#
# Will suggest replacing "wibbleMany [myvar]" with "wibbleOne myvar"
# - error: {lhs: "wibbleMany [x]", rhs: wibbleOne x}
- error:
    name: "Use mkPrimVector"
    lhs: "Data.Vector.Primitive.Vector"
    rhs: "mkPrimVector"

- ignore: { name: "Use mkPrimVector", within: "Database.LSMTree.Internal.Vector" }

# Define some custom infix operators
# - fixity: infixr 3 ~^#^~
