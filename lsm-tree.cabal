cabal-version:      3.4
name:               lsm-tree
version:            0.1.0.0
synopsis:           Log-structured merge-trees
description:
  This package contains an efficient implementation of on-disk key–value storage, implemented as a log-structured merge-tree or LSM-tree.
  An LSM-tree is a data structure for key–value mappings, similar to "Data.Map", but optimized for large tables with a high insertion volume.
  It has support for:

  *   Basic key–value operations, such as lookup, insert, and delete.
  *   Range lookups, which efficiently retrieve the values for all keys in a given range.
  *   Monoidal upserts which combine the stored and new values.
  *   BLOB storage which associates a large auxiliary BLOB with a key.
  *   Durable on-disk persistence and rollback via named snapshots.
  *   Cheap table duplication where all duplicates can be independently accessed and modified.
  *   High-performance lookups on SSDs using I\/O batching and parallelism.

  This package exports two modules:

  *   "Database.LSMTree.Simple"

      This module exports a simplified API which picks sensible defaults for a number of configuration parameters.

      It does not support upserts or BLOBs, due to their unintuitive interaction, see [Upsert and BLOB](#upsertandblob).

      If you are looking at this package for the first time, it is strongly recommended that you start by reading this module.

  *   "Database.LSMTree"

      This module exports the full API.

  == Upsert and BLOB #upsertandblob#

  The interaction between upserts and BLOBs is unintuitive.
  A upsert updates the value associated with the key by combining the new and old values with a user-specified function.
  However, any BLOB associated with the key is simply deleted.

  == Portability #portability#

  * This package only supports 64-bit, little-endian systems.
  * On Windows, the package has only been tested with NTFS filesystems.
  * On Linux, executables using this package, including test and benchmark suites, must be compiled with the [@-threaded@](https://downloads.haskell.org/ghc/latest/docs/users_guide/phases.html#ghc-flag-threaded) RTS option enabled.

  == Concurrency #concurrency#

  LSM-trees can be used concurrently, but with a few restrictions:

  *   Each session locks its session directory.
      This means that a database cannot be accessed from different processes at the same time.
  *   Tables can be used concurrently and concurrent use of read operations such as lookups is deterministic.
      However, concurrent use of write operations such as insert or delete with any other operation results in a race condition.

  == Performance #performance#

  The worst-case behaviour of the library is described using [big-O notation](http://en.wikipedia.org/wiki/Big_O_notation).
  The documentation provides two measures of complexity:

  *   The time complexity of operations is described in terms of the number of disk I\/O operations and referred to as the disk I\/O complexity.
      In practice, the time of the operations on LSM-trees is dominated by the number of disk I\/O actions.
  *   The space complexity of tables is described in terms of the in-memory size of an LSM-tree table.
      Both the in-memory and on-disk size of an LSM-tree table scale linearly with the number of physical entries.
      However, the in-memory size of an LSM-tree table is smaller than its on-disk size by a significant constant.
      This is discussed in detail below, under [In-memory size of tables](#performance_size).

  The complexities are described in terms of the following variables and constants:

  *   The variable \(n\) refers to the number of /physical/ table entries.
      A /physical/ table entry is any key–operation pair, e.g., @Insert k v@ or @Delete k@, whereas a /logical/ table entry is determined by all physical entries with the same key.
      If the variable \(n\) is used to describe the complexity of an operation that involves multiple tables, it refers to the sum of all table entries.
  *   The variable \(o\) refers to the number of open tables and cursors in the session.
  *   The variable \(s\) refers to the number of snapshots in the session.
  *   The variable \(b\) usually refers to the size of a batch of inputs\/outputs.
      Its precise meaning is explained for each occurrence.
  *   The constant \(B\) refers to the size of the write buffer, which is a configuration parameter.
  *   The constant \(T\) refers to the size ratio of the table, which is a configuration parameter.
  *   The constant \(P\) refers to the the average number of key–value pairs that fit in a page of memory.

  === Disk I\/O cost of operations #performance_time#

  The following table summarises the cost of the operations on LSM-trees measured in the number of disk I\/O operations.
  If the cost depends on the merge policy or merge schedule, then the table contains one entry for each relevant combination.
  Otherwise, the merge policy and\/or merge schedule is listed as N\/A.

  +----------+------------------------+-----------------+-----------------+------------------------------------------------+
  | Resource | Operation              | Merge policy    | Merge schedule  | Cost in disk I\/O operations                   |
  +==========+========================+=================+=================+================================================+
  | Session  | Create\/Open           | N\/A            | N\/A            | \(O(1)\)                                       |
  +----------+------------------------+-----------------+-----------------+------------------------------------------------+
  |          | Close                  | @LazyLevelling@ | N\/A            | \(O(o \: T \: \log_T \frac{n}{B})\)            |
  +----------+------------------------+-----------------+-----------------+------------------------------------------------+
  | Table    | Create                 | N\/A            | N\/A            | \(O(1)\)                                       |
  +----------+------------------------+-----------------+-----------------+------------------------------------------------+
  |          | Close                  | @LazyLevelling@ | N\/A            | \(O(T \: \log_T \frac{n}{B})\)                 |
  +----------+------------------------+-----------------+-----------------+------------------------------------------------+
  |          | Lookup                 | @LazyLevelling@ | N\/A            | \(O(T \: \log_T \frac{n}{B})\)                 |
  +----------+------------------------+-----------------+-----------------+------------------------------------------------+
  |          | Range Lookup           | @LazyLevelling@ | N\/A            | \(O(T \: \log_T \frac{n}{B} + \frac{b}{P})\)*  |
  +----------+------------------------+-----------------+-----------------+------------------------------------------------+
  |          | Insert\/Delete\/Update | @LazyLevelling@ | @Incremental@   | \(O(\frac{1}{P} \: \log_T \frac{n}{B})\)       |
  +----------+------------------------+-----------------+-----------------+------------------------------------------------+
  |          |                        | @LazyLevelling@ | @OneShot@       | \(O(\frac{n}{P})\)                             |
  +----------+------------------------+-----------------+-----------------+------------------------------------------------+
  |          | Duplicate              | N\/A            | N\/A            | \(O(0)\)                                       |
  +----------+------------------------+-----------------+-----------------+------------------------------------------------+
  |          | Union                  | N\/A            | N\/A            | \(O(\frac{n}{P})\)                             |
  +----------+------------------------+-----------------+-----------------+------------------------------------------------+
  | Snapshot | Save                   | @LazyLevelling@ | N\/A            | \(O(T \: \log_T \frac{n}{B})\)                 |
  +----------+------------------------+-----------------+-----------------+------------------------------------------------+
  |          | Open                   | N\/A            | N\/A            | \(O(\frac{n}{P})\)                             |
  +----------+------------------------+-----------------+-----------------+------------------------------------------------+
  |          | Delete                 | @LazyLevelling@ | N\/A            | \(O(T \: \log_T \frac{n}{B})\)                 |
  +----------+------------------------+-----------------+-----------------+------------------------------------------------+
  |          | List                   | N\/A            | N\/A            | \(O(s)\)                                       |
  +----------+------------------------+-----------------+-----------------+------------------------------------------------+
  | Cursor   | Create                 | @LazyLevelling@ | N\/A            | \(O(T \: \log_T \frac{n}{B})\)                 |
  +----------+------------------------+-----------------+-----------------+------------------------------------------------+
  |          | Close                  | @LazyLevelling@ | N\/A            | \(O(T \: \log_T \frac{n}{B})\)                 |
  +----------+------------------------+-----------------+-----------------+------------------------------------------------+
  |          | Read next entry        | N\/A            | N\/A            | \(O(\frac{1}{P})\)                             |
  +----------+------------------------+-----------------+-----------------+------------------------------------------------+

  (*The variable \(b\) refers to the number of entries retrieved by the range lookup.)

  TODO: Document the average-case behaviour of lookups.

  === In-memory size of tables #performance_size#

  The in-memory size of an LSM-tree is described in terms of the variable \(n\), which refers to the number of /physical/ database entries.
  A /physical/ database entry is any key–operation pair, e.g., @Insert k v@ or @Delete k@, whereas a /logical/ database entry is determined by all physical entries with the same key.

  The worst-case in-memory size of an LSM-tree is \(O(n)\).

  *   The worst-case in-memory size of the write buffer is \(O(B)\).

      The maximum size of the write buffer on the write buffer allocation strategy, which is determined by the @confWriteBufferAlloc@ field of @TableConfig@.
      Regardless of write buffer allocation strategy, the size of the write buffer may never exceed 4GiB.

      [@AllocNumEntries maxEntries@]:
        The maximum size of the write buffer is the maximum number of entries multiplied by the average size of a key–operation pair.

  *   The worst-case in-memory size of the Bloom filters is \(O(n)\).

      The total in-memory size of all Bloom filters is the number of bits per physical entry multiplied by the number of physical entries.
      The required number of bits per physical entry is determined by the Bloom filter allocation strategy, which is determined by the @confBloomFilterAlloc@ field of @TableConfig@.

      [@AllocFixed bitsPerPhysicalEntry@]:
          The number of bits per physical entry is specified as @bitsPerPhysicalEntry@.
      [@AllocRequestFPR requestedFPR@]:
          The number of bits per physical entry is determined by the requested false-positive rate, which is specified as @requestedFPR@.

      The false-positive rate scales exponentially with the number of bits per entry:

      +---------------------------+---------------------+
      | False-positive rate       | Bits per entry      |
      +===========================+=====================+
      | \(1\text{ in }10\)        | \(\approx  4.77 \)  |
      +---------------------------+---------------------+
      | \(1\text{ in }100\)       | \(\approx  9.85 \)  |
      +---------------------------+---------------------+
      | \(1\text{ in }1{,}000\)   | \(\approx 15.79 \)  |
      +---------------------------+---------------------+
      | \(1\text{ in }10{,}000\)  | \(\approx 22.58 \)  |
      +---------------------------+---------------------+
      | \(1\text{ in }100{,}000\) | \(\approx 30.22 \)  |
      +---------------------------+---------------------+

  *   The worst-case in-memory size of the indexes is \(O(n)\).

      The total in-memory size of all indexes depends on the index type, which is determined by the @confFencePointerIndex@ field of @TableConfig@.
      The in-memory size of the various indexes is described in reference to the size of the database in [/memory pages/](https://en.wikipedia.org/wiki/Page_%28computer_memory%29).

      [@OrdinaryIndex@]:
          An ordinary index stores the maximum serialised key for each memory page.
          The total in-memory size of all indexes is proportional to the average size of one serialised key per memory page.
      [@CompactIndex@]:
          A compact index stores the 64 most significant bits of the minimum serialised key for each memory page, as well as 1 bit per memory page to resolve clashes, 1 bit per memory page to mark overflow pages, and a negligible amount of memory for tie breakers.
          The total in-memory size of all indexes is approximately 66 bits per memory page.

  The total size of an LSM-tree must not exceed \(2^{41}\) physical entries.
  Violation of this condition /is/ checked and will throw a 'TableTooLargeError'.

  == Implementation

  The implementation of LSM-trees in this package draws inspiration from:

  *   Chris Okasaki.
      1998.
      \"Purely Functional Data Structures\"
      [doi:10.1017/CBO9780511530104](https://doi.org/10.1017/CBO9780511530104)
  *   Niv Dayan, Manos Athanassoulis, and Stratos Idreos.
      2017.
      \"Monkey: Optimal Navigable Key-Value Store.\"
      [doi:10.1145/3035918.3064054](https://doi.org/10.1145/3035918.3064054)
  *   Subhadeep Sarkar, Dimitris Staratzis, Ziehen Zhu, and Manos Athanassoulis.
      2021.
      \"Constructing and analyzing the LSM compaction design space.\"
      [doi:10.14778/3476249.3476274](https://doi.org/10.14778/3476249.3476274)

license:            Apache-2.0
license-files:
  LICENSE
  NOTICE

author:
  Duncan Coutts, Joris Dral, Matthias Heinzel, Wolfgang Jeltsch, Wen Kokke, and Alex Washburn

maintainer:         TODO: MAINTAINER EMAIL
copyright:
  (c) 2023 Input Output Global, Inc. (IOG)
  (c) 2023-2025 INTERSECT

category:           Database
build-type:         Simple
tested-with:
  GHC ==9.2 || ==9.4 || ==9.6 || ==9.8 || ==9.10 || ==9.12

extra-doc-files:    CHANGELOG.md
extra-source-files:
  xxhash/include/HsXXHash.h
  xxhash/xxHash-0.8.2/xxhash.h

license-files:
  bloomfilter/LICENSE-bloomfilter
  xxhash/xxHash-0.8.2/LICENSE-xxHash

source-repository head
  type:     git
  location: https://github.com/IntersectMBO/lsm-tree

-- TODO: this tag obviously does not exist yet because the package has not
-- been published
source-repository this
  type:     git
  location: https://github.com/IntersectMBO/lsm-tree
  tag:      lsm-tree-0.1.0.0

common warnings
  ghc-options:
    -Wall -Wcompat -Wincomplete-uni-patterns
    -Wincomplete-record-updates -Wpartial-fields -Widentities
    -Wredundant-constraints -Wmissing-export-lists
    -Wno-unticked-promoted-constructors -Wunused-packages

  ghc-options: -Werror=missing-deriving-strategies

common wno-x-partial
  if impl(ghc >=9.8)
    -- No errors for x-partial functions. We might remove this in the future if
    -- we decide to refactor code that uses partial functions.
    ghc-options: -Wno-x-partial

common language
  default-language:   GHC2021
  default-extensions:
    DeriveAnyClass
    DerivingStrategies
    DerivingVia
    ExplicitNamespaces
    GADTs
    LambdaCase
    RecordWildCards
    RoleAnnotations
    ViewPatterns

flag bloom-query-fast
  description: Use an optimised Bloom filter query implementation
  default:     True
  manual:      True

common bloom-query-fast
  if (flag(bloom-query-fast) && impl(ghc >=9.4))

--TODO: temporarily disabled:
--cpp-options: -DBLOOM_QUERY_FAST

library
  import:          language, warnings, wno-x-partial, bloom-query-fast
  hs-source-dirs:  src
  exposed-modules:
    Database.LSMTree
    Database.LSMTree.Internal.Arena
    Database.LSMTree.Internal.Assertions
    Database.LSMTree.Internal.BitMath
    Database.LSMTree.Internal.BlobFile
    Database.LSMTree.Internal.BlobRef
    Database.LSMTree.Internal.BloomFilter
    Database.LSMTree.Internal.BloomFilterQuery1
    Database.LSMTree.Internal.ByteString
    Database.LSMTree.Internal.ChecksumHandle
    Database.LSMTree.Internal.Chunk
    Database.LSMTree.Internal.Config
    Database.LSMTree.Internal.Config.Override
    Database.LSMTree.Internal.CRC32C
    Database.LSMTree.Internal.Cursor
    Database.LSMTree.Internal.Entry
    Database.LSMTree.Internal.IncomingRun
    Database.LSMTree.Internal.Index
    Database.LSMTree.Internal.Index.Compact
    Database.LSMTree.Internal.Index.CompactAcc
    Database.LSMTree.Internal.Index.Ordinary
    Database.LSMTree.Internal.Index.OrdinaryAcc
    Database.LSMTree.Internal.Lookup
    Database.LSMTree.Internal.Map.Range
    Database.LSMTree.Internal.Merge
    Database.LSMTree.Internal.MergeSchedule
    Database.LSMTree.Internal.MergingRun
    Database.LSMTree.Internal.MergingTree
    Database.LSMTree.Internal.MergingTree.Lookup
    Database.LSMTree.Internal.Page
    Database.LSMTree.Internal.PageAcc
    Database.LSMTree.Internal.PageAcc1
    Database.LSMTree.Internal.Paths
    Database.LSMTree.Internal.Primitive
    Database.LSMTree.Internal.Range
    Database.LSMTree.Internal.RawBytes
    Database.LSMTree.Internal.RawOverflowPage
    Database.LSMTree.Internal.RawPage
    Database.LSMTree.Internal.Readers
    Database.LSMTree.Internal.Run
    Database.LSMTree.Internal.RunAcc
    Database.LSMTree.Internal.RunBuilder
    Database.LSMTree.Internal.RunNumber
    Database.LSMTree.Internal.RunReader
    Database.LSMTree.Internal.Serialise
    Database.LSMTree.Internal.Serialise.Class
    Database.LSMTree.Internal.Snapshot
    Database.LSMTree.Internal.Snapshot.Codec
    Database.LSMTree.Internal.Types
    Database.LSMTree.Internal.UniqCounter
    Database.LSMTree.Internal.Unsafe
    Database.LSMTree.Internal.Unsliced
    Database.LSMTree.Internal.Vector
    Database.LSMTree.Internal.Vector.Growing
    Database.LSMTree.Internal.WriteBuffer
    Database.LSMTree.Internal.WriteBufferBlobs
    Database.LSMTree.Internal.WriteBufferReader
    Database.LSMTree.Internal.WriteBufferWriter
    Database.LSMTree.Simple

  build-depends:
    , base                    >=4.16      && <4.22
    , bitvec                  ^>=1.1
    , blockio                 ^>=0.1
    , bytestring              ^>=0.11.4.0 || ^>=0.12.1.0
    , cborg                   ^>=0.2.10.0
    , containers              ^>=0.6      || ^>=0.7
    , contra-tracer           ^>=0.2
    , crc32c                  ^>=0.2.1
    , deepseq                 ^>=1.4      || ^>=1.5
    , filepath
    , fs-api                  ^>=0.3
    , io-classes              ^>=1.6      || ^>=1.7
    , io-classes:strict-mvar
    , lsm-tree:bloomfilter
    , lsm-tree:control
    , lsm-tree:kmerge
    , primitive               ^>=0.9
    , text                    ^>=2.1.1
    , utf8-string             ^>=1.0
    , vector                  ^>=0.13
    , vector-algorithms       ^>=0.9

  if (flag(bloom-query-fast) && impl(ghc >=9.4))
    -- The bulk bloom filter query uses some fancy stuff
    exposed-modules: Database.LSMTree.Internal.StrictArray

    --TODO: temporarily disabled
    --  Database.LSMTree.Internal.BloomFilterQuery2
    build-depends:   data-elevator ^>=0.1.0.2 || ^>=0.2

-- this exists due windows
library xxhash
  import:          language
  visibility:      private
  include-dirs:    xxhash/xxHash-0.8.2/ xxhash/include/
  includes:
    HsXXHash.h
    xxhash.h

  exposed-modules: XXH3

  if (arch(x86_64) && !os(osx))
    -- Cabal doesn't pass cc-options to "ordinary" Haskell source compilation
    -- https://github.com/haskell/cabal/issues/9801
    ghc-options: -optc=-mavx2 -optc=-O3

  other-modules:   FFI
  hs-source-dirs:  xxhash/src
  build-depends:
    , base        <5
    , bytestring
    , primitive   ^>=0.9

test-suite xxhash-tests
  import:         language
  type:           exitcode-stdio-1.0
  hs-source-dirs: xxhash/tests
  main-is:        xxhash-tests.hs
  build-depends:
    , base              <5
    , bytestring
    , lsm-tree:xxhash
    , primitive
    , tasty
    , tasty-hunit
    , tasty-quickcheck

-- this fork doesn't work on 32bit systems
library bloomfilter
  import:          language, warnings
  visibility:      private
  hs-source-dirs:  bloomfilter/src
  build-depends:
    , base             >=4.16 && <5
    , bytestring       >=0.9
    , deepseq
    , lsm-tree:xxhash
    , primitive

  exposed-modules:
    Data.BloomFilter
    Data.BloomFilter.Blocked
    Data.BloomFilter.Classic
    Data.BloomFilter.Hash

  other-modules:
    Data.BloomFilter.Blocked.BitArray
    Data.BloomFilter.Blocked.Calc
    Data.BloomFilter.Blocked.Internal
    Data.BloomFilter.Classic.BitArray
    Data.BloomFilter.Classic.Calc
    Data.BloomFilter.Classic.Internal

  ghc-options:     -O2

test-suite bloomfilter-tests
  import:         language, warnings
  type:           exitcode-stdio-1.0
  hs-source-dirs: bloomfilter/tests
  main-is:        bloomfilter-tests.hs
  build-depends:
    , base                  <5
    , bytestring
    , lsm-tree:bloomfilter
    , quickcheck-instances
    , tasty
    , tasty-quickcheck

benchmark bloomfilter-bench
  import:         language
  type:           exitcode-stdio-1.0
  hs-source-dirs: bloomfilter/bench
  main-is:        bloomfilter-bench.hs
  build-depends:
    , base
    , criterion
    , lsm-tree:bloomfilter
    , random

executable bloomfilter-fpr-calc
  import:         language, warnings
  scope:          private
  hs-source-dirs: bloomfilter/tests
  main-is:        fpr-calc.hs
  build-depends:
    , base
    , containers
    , lsm-tree:bloomfilter
    , parallel
    , random
    , regression-simple

  ghc-options:    -threaded

executable bloomfilter-spell
  import:         language
  scope:          private
  hs-source-dirs: bloomfilter/examples
  main-is:        spell.hs
  build-depends:
    , base
    , lsm-tree:bloomfilter

library extras
  import:          language, warnings
  visibility:      private
  hs-source-dirs:  src-extras
  exposed-modules:
    Database.LSMTree.Extras
    Database.LSMTree.Extras.Generators
    Database.LSMTree.Extras.Index
    Database.LSMTree.Extras.MergingRunData
    Database.LSMTree.Extras.MergingTreeData
    Database.LSMTree.Extras.NoThunks
    Database.LSMTree.Extras.Orphans
    Database.LSMTree.Extras.Random
    Database.LSMTree.Extras.ReferenceImpl
    Database.LSMTree.Extras.RunData
    Database.LSMTree.Extras.UTxO

  build-depends:
    , base                    >=4.16 && <4.22
    , bitvec
    , blockio
    , bytestring
    , containers
    , contra-tracer
    , deepseq
    , fs-api
    , fs-sim
    , io-classes:strict-mvar
    , io-classes:strict-stm
    , lsm-tree
    , lsm-tree:control
    , lsm-tree:kmerge
    , lsm-tree:prototypes
    , nonempty-containers
    , nothunks
    , primitive
    , QuickCheck
    , quickcheck-instances
    , random
    , vector
    , wide-word

test-suite lsm-tree-test
  import:         language, warnings, wno-x-partial, bloom-query-fast
  type:           exitcode-stdio-1.0
  hs-source-dirs: test
  main-is:        Main.hs
  other-modules:
    Database.LSMTree.Class
    Database.LSMTree.Class.Common
    Database.LSMTree.Model
    Database.LSMTree.Model.IO
    Database.LSMTree.Model.Session
    Database.LSMTree.Model.Table
    Test.Database.LSMTree.Class
    Test.Database.LSMTree.Generators
    Test.Database.LSMTree.Internal
    Test.Database.LSMTree.Internal.Arena
    Test.Database.LSMTree.Internal.BlobFile.FS
    Test.Database.LSMTree.Internal.BloomFilter
    Test.Database.LSMTree.Internal.Chunk
    Test.Database.LSMTree.Internal.CRC32C
    Test.Database.LSMTree.Internal.Entry
    Test.Database.LSMTree.Internal.Index.Compact
    Test.Database.LSMTree.Internal.Index.Ordinary
    Test.Database.LSMTree.Internal.Lookup
    Test.Database.LSMTree.Internal.Merge
    Test.Database.LSMTree.Internal.MergingRun
    Test.Database.LSMTree.Internal.MergingTree
    Test.Database.LSMTree.Internal.PageAcc
    Test.Database.LSMTree.Internal.PageAcc1
    Test.Database.LSMTree.Internal.RawBytes
    Test.Database.LSMTree.Internal.RawOverflowPage
    Test.Database.LSMTree.Internal.RawPage
    Test.Database.LSMTree.Internal.Readers
    Test.Database.LSMTree.Internal.Run
    Test.Database.LSMTree.Internal.RunAcc
    Test.Database.LSMTree.Internal.RunBloomFilterAlloc
    Test.Database.LSMTree.Internal.RunBuilder
    Test.Database.LSMTree.Internal.RunReader
    Test.Database.LSMTree.Internal.Serialise
    Test.Database.LSMTree.Internal.Serialise.Class
    Test.Database.LSMTree.Internal.Snapshot.Codec
    Test.Database.LSMTree.Internal.Snapshot.Codec.Golden
    Test.Database.LSMTree.Internal.Snapshot.FS
    Test.Database.LSMTree.Internal.Unsliced
    Test.Database.LSMTree.Internal.Vector
    Test.Database.LSMTree.Internal.Vector.Growing
    Test.Database.LSMTree.Internal.WriteBufferBlobs.FS
    Test.Database.LSMTree.Internal.WriteBufferReader.FS
    Test.Database.LSMTree.Model.Table
    Test.Database.LSMTree.Resolve
    Test.Database.LSMTree.StateMachine
    Test.Database.LSMTree.StateMachine.DL
    Test.Database.LSMTree.StateMachine.Op
    Test.Database.LSMTree.UnitTests
    Test.FS
    Test.Util.Arbitrary
    Test.Util.FS
    Test.Util.FS.Error
    Test.Util.Orphans
    Test.Util.PrettyProxy
    Test.Util.QC
    Test.Util.QLS
    Test.Util.RawPage
    Test.Util.TypeFamilyWrappers

  build-depends:
    , ansi-terminal
    , barbies
    , base                    <5
    , bitvec
    , blockio
    , blockio:sim
    , bytestring
    , cborg
    , constraints
    , containers
    , contra-tracer
    , crc32c
    , cryptohash-sha256
    , deepseq
    , directory
    , filepath
    , fs-api
    , fs-sim
    , io-classes
    , io-classes:strict-mvar
    , io-classes:strict-stm
    , io-sim
    , lsm-tree
    , lsm-tree:bloomfilter
    , lsm-tree:control
    , lsm-tree:extras
    , lsm-tree:prototypes
    , mtl
    , nothunks
    , primitive
    , QuickCheck
    , quickcheck-classes
    , quickcheck-dynamic
    , quickcheck-instances
    , quickcheck-lockstep
    , random
    , safe-wild-cards
    , semialign
    , split
    , stm
    , tasty
    , tasty-golden
    , tasty-hunit
    , tasty-quickcheck
    , temporary
    , text
    , these
    , transformers
    , vector
    , vector-algorithms
    , wide-word

  ghc-options:    -threaded

benchmark lsm-tree-micro-bench
  import:         language, warnings, wno-x-partial
  type:           exitcode-stdio-1.0
  hs-source-dirs: bench/micro
  main-is:        Main.hs
  other-modules:
    Bench.Database.LSMTree
    Bench.Database.LSMTree.Internal.BloomFilter
    Bench.Database.LSMTree.Internal.Index
    Bench.Database.LSMTree.Internal.Index.Compact
    Bench.Database.LSMTree.Internal.Lookup
    Bench.Database.LSMTree.Internal.Merge
    Bench.Database.LSMTree.Internal.RawPage
    Bench.Database.LSMTree.Internal.Serialise
    Bench.Database.LSMTree.Internal.WriteBuffer

  build-depends:
    , base                  <5
    , blockio
    , bytestring
    , containers
    , contra-tracer
    , criterion
    , deepseq
    , directory
    , fs-api
    , lsm-tree
    , lsm-tree:bloomfilter
    , lsm-tree:control
    , lsm-tree:extras
    , QuickCheck
    , random
    , temporary
    , vector

  ghc-options:    -rtsopts -with-rtsopts=-T -threaded

benchmark lsm-tree-bench-bloomfilter
  import:         language, warnings, wno-x-partial, bloom-query-fast
  type:           exitcode-stdio-1.0
  hs-source-dirs: bench/macro
  main-is:        lsm-tree-bench-bloomfilter.hs
  build-depends:
    , base                  <5
    , lsm-tree
    , lsm-tree:bloomfilter
    , lsm-tree:extras
    , random
    , time
    , vector
    , wide-word

  ghc-options:    -rtsopts -with-rtsopts=-T -threaded

benchmark lsm-tree-bench-lookups
  import:         language, warnings, wno-x-partial
  type:           exitcode-stdio-1.0
  hs-source-dirs: bench/macro
  main-is:        lsm-tree-bench-lookups.hs
  build-depends:
    , base                  <5
    , blockio
    , deepseq
    , fs-api
    , io-classes
    , lsm-tree
    , lsm-tree:bloomfilter
    , lsm-tree:control
    , lsm-tree:extras
    , primitive
    , random
    , time
    , vector
    , vector-algorithms

  ghc-options:    -rtsopts -with-rtsopts=-T -threaded

library mcg
  import:          language, warnings, wno-x-partial
  hs-source-dirs:  src-mcg
  exposed-modules: MCG
  build-depends:
    , base    <5
    , primes

flag measure-batch-latency
  description:
    Measure the latency for individual batches of updates and lookups

  default:     False
  manual:      True

common measure-batch-latency
  if flag(measure-batch-latency)
    cpp-options: -DMEASURE_BATCH_LATENCY

benchmark lsm-tree-bench-wp8
  import:         language, warnings, wno-x-partial, measure-batch-latency
  type:           exitcode-stdio-1.0
  hs-source-dirs: bench/macro
  main-is:        lsm-tree-bench-wp8.hs
  build-depends:
    , async
    , base                  <5
    , blockio
    , bytestring
    , clock
    , containers
    , contra-tracer
    , deepseq
    , fs-api
    , lsm-tree
    , lsm-tree:extras
    , lsm-tree:mcg
    , optparse-applicative
    , pretty-show
    , primitive
    , random
    , transformers
    , vector

  ghc-options:    -rtsopts -with-rtsopts=-T -threaded

flag rocksdb
  description: Build components that rely on RocksDB (only on Linux)
  default:     True
  manual:      False

benchmark rocksdb-bench-wp8
  import:         language, warnings, wno-x-partial
  type:           exitcode-stdio-1.0
  hs-source-dirs: bench/macro
  main-is:        rocksdb-bench-wp8.hs

  if !(os(linux) && flag(rocksdb))
    buildable: False

  build-depends:
    , base                  <5
    , binary
    , bytestring
    , clock
    , containers
    , cryptohash-sha256
    , deepseq
    , directory
    , lsm-tree:mcg
    , lsm-tree:rocksdb
    , optparse-applicative
    , split

  ghc-options:    -rtsopts -with-rtsopts=-T -threaded

library rocksdb
  import:          language, warnings
  hs-source-dirs:  src-rocksdb
  exposed-modules: RocksDB
  other-modules:   RocksDB.FFI

  if !(os(linux) && flag(rocksdb))
    buildable: False

  -- Ubuntu 22.04 doesn't have pkgconfig files for rocksdb
  extra-libraries: rocksdb
  build-depends:
    , base                 <5
    , bytestring
    , indexed-traversable

library kmerge
  import:          language, warnings, wno-x-partial
  hs-source-dirs:  src-kmerge
  exposed-modules:
    KMerge.Heap
    KMerge.LoserTree

  build-depends:
    , base                 <5
    , indexed-traversable
    , primitive

test-suite kmerge-test
  import:         language, warnings, wno-x-partial
  type:           exitcode-stdio-1.0
  hs-source-dirs: test
  main-is:        kmerge-test.hs
  build-depends:
    , base              >=4.16 && <4.22
    , deepseq
    , heaps
    , lsm-tree:kmerge
    , primitive
    , splitmix
    , tasty
    , tasty-bench
    , tasty-hunit
    , tasty-quickcheck
    , vector

benchmark kmerge-bench
  import:         language, warnings, wno-x-partial
  type:           exitcode-stdio-1.0
  hs-source-dirs: test
  main-is:        kmerge-test.hs
  cpp-options:    -DKMERGE_BENCHMARKS
  build-depends:
    , base              >=4.16 && <4.22
    , deepseq
    , heaps
    , lsm-tree:kmerge
    , primitive
    , splitmix
    , tasty
    , tasty-bench
    , tasty-hunit
    , tasty-quickcheck
    , vector

test-suite map-range-test
  import:         language, warnings, wno-x-partial
  type:           exitcode-stdio-1.0
  hs-source-dirs: test
  main-is:        map-range-test.hs
  build-depends:
    , base              >=4.16 && <4.22
    , bytestring
    , containers
    , lsm-tree
    , QuickCheck
    , tasty
    , tasty-hunit
    , tasty-quickcheck

library prototypes
  import:          language, warnings, wno-x-partial
  hs-source-dirs:  src-prototypes
  exposed-modules:
    FormatPage
    ScheduledMerges

  build-depends:
    , base           <5
    , binary
    , bytestring
    , containers
    , contra-tracer
    , QuickCheck
    , transformers

test-suite prototypes-test
  import:         language, warnings, wno-x-partial
  type:           exitcode-stdio-1.0
  hs-source-dirs: test-prototypes
  main-is:        Main.hs
  other-modules:
    Test.FormatPage
    Test.ScheduledMerges
    Test.ScheduledMergesQLS

  build-depends:
    , base                 <5
    , bytestring
    , constraints
    , containers
    , contra-tracer
    , lsm-tree:prototypes
    , QuickCheck
    , quickcheck-dynamic
    , quickcheck-lockstep
    , tasty
    , tasty-hunit
    , tasty-quickcheck

library control
  import:          language, warnings
  hs-source-dirs:  src-control
  exposed-modules:
    Control.ActionRegistry
    Control.Concurrent.Class.MonadSTM.RWVar
    Control.RefCount

  build-depends:
    , base                   >=4.16 && <4.22
    , deepseq                ^>=1.4 || ^>=1.5
    , io-classes             ^>=1.6 || ^>=1.7
    , io-classes:strict-stm
    , primitive              ^>=0.9

test-suite control-test
  import:         language, warnings
  type:           exitcode-stdio-1.0
  hs-source-dirs: test-control
  main-is:        Main.hs
  other-modules:
    Test.Control.ActionRegistry
    Test.Control.Concurrent.Class.MonadSTM.RWVar
    Test.Control.RefCount

  build-depends:
    , base              <5
    , io-classes
    , io-sim
    , lsm-tree:control
    , primitive
    , QuickCheck
    , tasty
    , tasty-quickcheck
